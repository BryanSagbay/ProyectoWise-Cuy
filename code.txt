import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2


class CameraNode(Node):
    def __init__(self):
        super().__init__('camera_node')
        self.publisher = self.create_publisher(Image, 'camera_frames', 10)
        self.br = CvBridge()
        self.timer = self.create_timer(0.1, self.publish_frame)  # Publica a 10 FPS
        self.cap = cv2.VideoCapture(0)

        if not self.cap.isOpened():
            self.get_logger().error('No se puede acceder a la cámara')
            self.cap.release()
            rclpy.shutdown()

    def publish_frame(self):
        ret, frame = self.cap.read()
        if ret:
            # Convierte el frame a un mensaje de ROS y publícalo
            msg = self.br.cv2_to_imgmsg(frame, encoding='bgr8')
            self.publisher.publish(msg)
        else:
            self.get_logger().warning('No se pudo capturar el frame')

    def __del__(self):
        self.cap.release()


def main(args=None):
    rclpy.init(args=args)
    node = CameraNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        del node
        rclpy.shutdown()


if __name__ == '__main__':
    main()
