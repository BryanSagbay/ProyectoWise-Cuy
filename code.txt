import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2
import os
import datetime

class ObjectDetectorNode(Node):
    def __init__(self):
        super().__init__('object_detector')
        self.subscription = self.create_subscription(
            Image,
            '/camera/image_raw',  # Cambia esto si el topic de la c치mara es diferente
            self.image_callback,
            10)
        self.bridge = CvBridge()
        self.output_dir = '/tmp/object_images'  # Cambia a la ruta deseada
        os.makedirs(self.output_dir, exist_ok=True)
        self.get_logger().info('Object Detector Node initialized!')

    def image_callback(self, msg):
        # Convertir imagen ROS a OpenCV
        cv_image = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')

        # Detecci칩n de objetos (esto es un ejemplo b치sico usando detecci칩n de bordes)
        gray_image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        edges = cv2.Canny(gray_image, 50, 150)

        # Si detecta bordes significativos, guarda la imagen
        if cv2.countNonZero(edges) > 1000:  # Threshold para decidir si hay un objeto
            timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = os.path.join(self.output_dir, f'object_{timestamp}.png')
            cv2.imwrite(filename, cv_image)
            self.get_logger().info(f'Object detected! Image saved to {filename}')

        # Mostrar imagen en ventana para debug
        cv2.imshow('Camera', cv_image)
        cv2.imshow('Edges', edges)
        cv2.waitKey(1)

def main(args=None):
    rclpy.init(args=args)
    node = ObjectDetectorNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()
        cv2.destroyAllWindows()

if __name__ == '__main__':
    main()
